version: '3.4'

# This Compose file is expected to be used with the devnet-up.sh script.
# The volumes below mount the configs generated by the script into each
# service.

volumes:
  l1_data:
  l2_data:
  l2_data2:
  op_log:
  op_log2:
  near_lc:

services:
  # Not needed for non-devnet deployments, but useful for testing.
  l1:
    build:
      context: .
      dockerfile: Dockerfile.l1
    env_file:
      - .env
    ports:
      - '8545:8545'
      - '7060:6060'
    volumes:
      - 'l1_data:/db'
      - '${PWD}/../.devnet/genesis-l1.json:/genesis.json'
      - '${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt'

  l2:
    build:
      context: .
      dockerfile: Dockerfile.l2
    env_file:
      - .env
    ports:
      - '9545:8545'
      - '8060:6060'
    volumes:
      - 'l2_data:/db'
      - '${PWD}/../.devnet/genesis-l2.json:/genesis.json'
      - '${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt'
    entrypoint: # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - '/bin/sh'
      - '/entrypoint.sh'
      - '--authrpc.jwtsecret=/config/test-jwt-secret.txt'

  op-node:
    depends_on:
      - l1
      - l2
    build:
      context: ../
      dockerfile: ./op-node/Dockerfile
    env_file:
      - .env
    command: >
      op-node
      --l1=ws://l1:8546
      --l2=http://l2:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --sequencer.enabled
      --sequencer.l1-confs=0
      --verifier.l1-confs=0
      --p2p.sequencer.key=8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8545
      --p2p.listen.ip=0.0.0.0
      --p2p.listen.tcp=9003
      --p2p.listen.udp=9003
      --p2p.scoring.peers=light
      --p2p.ban.peers=true
      --snapshotlog.file=/op_log/snapshot.log
      --p2p.priv.path=/config/p2p-node-key.txt
      --metrics.enabled
      --metrics.addr=0.0.0.0
      --metrics.port=7300
      --pprof.enabled
      --rpc.enable-admin
      --da-account=${DA_ACCOUNT}
      --da-contract=${DA_CONTRACT}
      --da-key=${DA_KEY}
      --namespace-id=${NAMESPACE_ID}
      #--p2p.static=/dns/op-node2/tcp/9003/udp/9003
    ports:
      - '7545:8545'
      - '9003:9003'
      - '7300:7300'
      - '6060:6060'
    volumes:
      - '${PWD}/p2p-sequencer-key.txt:/config/p2p-sequencer-key.txt'
      - '${PWD}/p2p-node-key.txt:/config/p2p-node-key.txt'
      - '${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt'
      - '${PWD}/../.devnet/rollup.json:/rollup.json'
      - op_log:/op_log


  l22:
    build:
      context: .
      dockerfile: Dockerfile.l2
    env_file:
      - .env
    ports:
      - '9546:8545'
      - '8061:6060'
    volumes:
      - 'l2_data2:/db'
      - '${PWD}/../.devnet/genesis-l2.json:/genesis.json'
      - '${PWD}/test-jwt-secret2.txt:/config/test-jwt-secret.txt'
    entrypoint: # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - '/bin/sh'
      - '/entrypoint.sh'
      - '--authrpc.jwtsecret=/config/test-jwt-secret.txt'

  op-node2:
    depends_on:
      - l1
      - l22
    build:
      context: ../
      dockerfile: ./op-node/Dockerfile
    env_file:
      - .env
    command: >
      op-node
      --l1=ws://l1:8546
      --l2=http://l22:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --verifier.l1-confs=0
      --p2p.sequencer.key=8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8545
      --p2p.listen.ip=0.0.0.0
      --p2p.listen.tcp=9003
      --p2p.listen.udp=9003
      --p2p.scoring.peers=light
      --p2p.ban.peers=true
      --snapshotlog.file=/op_log/snapshot.log
      --p2p.priv.path=/config/p2p-node-key.txt
      --metrics.enabled
      --metrics.addr=0.0.0.0
      --metrics.port=7300
      --pprof.enabled
      --rpc.enable-admin
      --da-account=${DA_ACCOUNT}
      --da-contract=${DA_CONTRACT}
      --da-key=${DA_KEY}
      --namespace-id=${NAMESPACE_ID}
    ports:
      - '7546:8545'
      - '9005:9003'
      - '7303:7300'
      - '6063:6060'
    volumes:
      - '${PWD}/p2p-sequencer-key.txt:/config/p2p-sequencer-key.txt'
      - '${PWD}/p2p-node-key.txt:/config/p2p-node-key.txt'
      - '${PWD}/test-jwt-secret2.txt:/config/test-jwt-secret.txt'
      - '${PWD}/../.devnet/rollup.json:/rollup.json'
      - op_log2:/op_log

  op-proposer:
    depends_on:
      - l1
      - l2
      - op-node
    build:
      context: ../
      dockerfile: ./op-proposer/Dockerfile
    env_file:
      - .env
    ports:
      - '6062:6060'
      - '7302:7300'
    environment:
      OP_PROPOSER_POLL_INTERVAL: 1s
      OP_PROPOSER_NUM_CONFIRMATIONS: 1
      OP_PROPOSER_SAFE_ABORT_NONCE_TOO_LOW_COUNT: 3
      OP_PROPOSER_RESUBMISSION_TIMEOUT: 30s
      OP_PROPOSER_PPROF_ENABLED: 'true'
      OP_PROPOSER_METRICS_ENABLED: 'true'
      OP_PROPOSER_ALLOW_NON_FINALIZED: 'false'

  op-batcher:
    depends_on:
      l1:
        condition: service_started
      l2:
        condition: service_started
      op-node:
        condition: service_started
    build:
      context: ../
      dockerfile: ./op-batcher/Dockerfile
    env_file:
      - .env
    ports:
      - '6061:6060'
      - '7301:7300'
      - '6545:8545'
    environment:
      OFFLINE_GAS_ESTIMATION: null
      OP_BATCHER_MAX_CHANNEL_DURATION: 1
      OP_BATCHER_MAX_L1_TX_SIZE_BYTES: 120000
      OP_BATCHER_TARGET_L1_TX_SIZE_BYTES: 100000
      OP_BATCHER_TARGET_NUM_FRAMES: 1
      OP_BATCHER_APPROX_COMPR_RATIO: 0.4
      OP_BATCHER_SUB_SAFETY_MARGIN: 4 # SWS is 15, ChannelTimeout is 40
      OP_BATCHER_POLL_INTERVAL: 1s
      OP_BATCHER_NUM_CONFIRMATIONS: 1
      OP_BATCHER_SAFE_ABORT_NONCE_TOO_LOW_COUNT: 3
      OP_BATCHER_RESUBMISSION_TIMEOUT: 30s
      OP_BATCHER_SEQUENCER_HD_PATH: "m/44'/60'/0'/0/2"
      OP_BATCHER_PPROF_ENABLED: 'true'
      OP_BATCHER_METRICS_ENABLED: 'true'
      OP_BATCHER_RPC_ENABLE_ADMIN: 'true'

  stateviz:
    build:
      context: ../
      dockerfile: ./ops-bedrock/Dockerfile.stateviz
    command:
      - stateviz
      - -addr=0.0.0.0:8080
      - -snapshot=/op_log/snapshot.log
      - -refresh=10s
    ports:
      - '9090:8080'
    volumes:
      - op_log:/op_log:ro

  light-client:
    image: ghcr.io/near/near-light-client/light-client:latest
    environment:
      RUST_LOG: info,near_offchain_light_client=debug
      NEAR_LIGHT_CLIENT_CONFIG_FILE: /var/light-client.toml
      NEAR_LIGHT_CLIENT_STATE_PATH: /var/db
      NEAR_LIGHT_CLIENT_NETWORK: Testnet
    ports:
      - '3000:3000'
    volumes:
      - near_lc:/var/db
      - ${PWD}/light-client.toml:/var/light-client.toml

  # ==== Blockscout ====
  redis_db:
    image: 'redis:alpine'
    ports:
      - 6379:6379
    container_name: 'blockscout-redis'
    command: redis-server
    volumes:
      - ${PWD}/data/redis-data:/data

  db:
    image: postgres:14
    restart: always
    container_name: 'blockscout-postgres'
    command: postgres -c 'max_connections=200'
    environment:
      POSTGRES_PASSWORD: ''
      POSTGRES_USER: 'postgres'
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    ports:
      - 7432:5432
    volumes:
      - ${PWD}/../data/blockscout-db-data:/var/lib/postgresql/data/

  # podman --storage-opt ignore_chown_errors=true run --name=blockscout -d --requires=smart-contract-verifier,postgres,redis_db --label io.podman.compose.config-hash=d9714ace0618a34f7b68615490aeb40921404bc2cad413f86f02d7f897709bf2 --label io.podman.compose.project=docker-compose --label io.podman.compose.version=1.0.6 --label PODMAN_SYSTEMD_UNIT=podman-compose@docker-compose.service --label com.docker.compose.project=docker-compose --label com.docker.compose.project.working_dir=/home/common/projects/data-availability/blockscout/docker-compose --label com.docker.compose.project.config_files=docker-compose-no-build-geth.yml --label com.docker.compose.container-number=1 --label com.docker.compose.service=blockscout --env-file /home/common/projects/data-availability/blockscout/docker-compose/envs/common-blockscout.env -e ETHEREUM_JSONRPC_VARIANT=geth -e ETHEREUM_JSONRPC_HTTP_URL=http://host.containers.internal:8545/ -e DATABASE_URL=postgresql://postgres:@host.containers.internal:7432/blockscout?ssl=false -e ECTO_USE_SSL=false -e SECRET_KEY_BASE=56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN -v /home/common/projects/data-availability/blockscout/docker-compose/logs:/app/logs/ --net docker-compose_default --network-alias blockscout -p 4000:4000 --pull always --restart always blockscout/blockscout:latest sh -c bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()" && bin/blockscout start
  blockscout:
    depends_on:
      - db
      - smart-contract-verifier
      - redis_db
    image: taulepton/blockscout:latest
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: 'blockscout'
    links:
      - db:database
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    env_file:
      - ${PWD}/envs/common-blockscout.env
    environment:
      ETHEREUM_JSONRPC_VARIANT: 'geth'
      ETHEREUM_JSONRPC_HTTP_URL: http://l2:8545/
      DATABASE_URL: postgresql://postgres:@db:5432/blockscout?ssl=false
      ECTO_USE_SSL: 'false'
      SECRET_KEY_BASE: '56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN'
    ports:
      - 4000:4000
    # volumes:
    #   - ./logs/:/app/logs/

  smart-contract-verifier:
    image: ghcr.io/blockscout/smart-contract-verifier:${SMART_CONTRACT_VERIFIER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'blockscout-smart-contract-verifier'
    env_file:
      - ${PWD}/envs/common-smart-contract-verifier.env
    ports:
      - 8150:8050

  visualizer:
    image: ghcr.io/blockscout/visualizer:${VISUALIZER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'blockscout-visualizer'
    env_file:
      - ${PWD}/envs/common-visualizer.env
    ports:
      - 8152:8050

  sig-provider:
    image: ghcr.io/blockscout/sig-provider:${SIG_PROVIDER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'blockscout-sig-provider'
    ports:
      - 8151:8050
